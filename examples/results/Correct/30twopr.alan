main () : proc

   is2prime (primeprime : int) : byte
      num : int;
      sqrt : int;
      odd : int;
      sum : int;
      divisor : int;
      quotient : int;
      more : byte;
   {
      num = primeprime;
      more = '\x01';
      while (more != '\0' & num != 2 & num > 0) {
         sqrt = 0;
         odd = 1;
         sum = 1;
         while (sum <= num) {
            sqrt = sqrt + 1;
            odd = odd + 2;
            sum = sum + odd;
         }
         divisor = 3;
         while (more != '\0' & divisor <= sqrt) {
            quotient = num / divisor;
            if (num == divisor * quotient)
               more = '\0';
            else
               divisor = divisor + 2;
         }
         num = num / 10;
      }
      return more;
   }
   
   output (n : int) : proc
   {
      writeInteger(n);
      writeString("\n");
   }
   
   max2prime : int;
   i : int;

{
   writeString("Limit: ");
   max2prime = readInteger();
   i = 6;
   while (i <= max2prime) {
      if (is2prime(i-1) != '\0')
         output(i-1);
      if (i+1 <= max2prime & is2prime(i+1) != '\0')
         output(i+1);
      i = i + 6;
   }
}
