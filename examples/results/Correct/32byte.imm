; ModuleID = 'alan'
source_filename = "alan"

@strtmp = private unnamed_addr constant [6 x i8] c"\0A---\0A\00"
@strtmp.1 = private unnamed_addr constant [7 x i8] c"10100\0A\00"

declare void @writeInteger(i16)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(i8*)

declare i16 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i16, i8*)

declare i16 @extend(i8)

declare i8 @shrink(i16)

declare i16 @strlen(i8*)

declare i16 @strcmp(i8*, i8*)

declare void @strcpy(i8*, i8*)

declare void @strcat(i8*, i8*)

define void @main() {
entry:
  %main.fr = alloca { i8, i8 }, align 8
  %0 = getelementptr inbounds { i8, i8 }, { i8, i8 }* %main.fr, i64 0, i32 0
  store i8 49, i8* %0, align 8
  %1 = getelementptr inbounds { i8, i8 }, { i8, i8 }* %main.fr, i64 0, i32 1
  store i8 0, i8* %1, align 1
  call void @writeByte(i8 49)
  call void @writeByte(i8 0)
  call void @writeByte(i8 49)
  call void @writeByte(i8 0)
  %2 = call i8 @main_lala({ i8, i8 }* nonnull %main.fr, i8 0, i8* nonnull %0)
  call void @writeByte(i8 %2)
  call void @main_correct({ i8, i8 }* nonnull %main.fr)
  ret void
}

define void @main_correct({ i8, i8 }* %fr_ptr) {
entry:
  call void @writeString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @strtmp, i64 0, i64 0))
  call void @writeString(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @strtmp.1, i64 0, i64 0))
  ret void
}

define i8 @main_lala({ i8, i8 }* %fr_ptr, i8 %a, i8* %b) {
entry:
  %loadtmp2 = load i8, i8* %b, align 1
  %multmp = mul i8 %loadtmp2, %a
  ret i8 %multmp
}
