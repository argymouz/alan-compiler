; ModuleID = 'alan'
source_filename = "alan"

@strtmp = private unnamed_addr constant [3 x i8] c", \00"
@strtmp.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@strtmp.2 = private unnamed_addr constant [8 x i8] c"Seed :\09\00"
@strtmp.3 = private unnamed_addr constant [16 x i8] c"Initial array; \00"
@strtmp.4 = private unnamed_addr constant [15 x i8] c"Sorted array: \00"

declare void @writeInteger(i16)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(i8*)

declare i16 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i16, i8*)

declare i16 @extend(i8)

declare i8 @shrink(i16)

declare i16 @strlen(i8*)

declare i16 @strcmp(i8*, i8*)

declare void @strcpy(i8*, i8*)

declare void @strcat(i8*, i8*)

define void @main() {
entry:
  %main.fr = alloca { i16, [16 x i16], i16 }, align 8
  call void @writeString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @strtmp.2, i64 0, i64 0))
  %0 = getelementptr inbounds { i16, [16 x i16], i16 }, { i16, [16 x i16], i16 }* %main.fr, i64 0, i32 0
  %1 = call i16 @readInteger()
  store i16 %1, i16* %0, align 8
  %2 = getelementptr inbounds { i16, [16 x i16], i16 }, { i16, [16 x i16], i16 }* %main.fr, i64 0, i32 2
  store i16 0, i16* %2, align 2
  br label %cond

cond:                                             ; preds = %entry, %do
  %loadtmp = phi i16 [ %1, %entry ], [ %modtmp, %do ]
  %loadtmp1 = phi i16 [ 0, %entry ], [ %addtmp6, %do ]
  %lesstmp = icmp slt i16 %loadtmp1, 16
  br i1 %lesstmp, label %do, label %after

after:                                            ; preds = %cond
  %3 = getelementptr inbounds { i16, [16 x i16], i16 }, { i16, [16 x i16], i16 }* %main.fr, i64 0, i32 1, i64 0
  call void @main-writeArray({ i16, [16 x i16], i16 }* nonnull %main.fr, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @strtmp.3, i64 0, i64 0), i16 16, i16* nonnull %3)
  call void @main-qsort({ i16, [16 x i16], i16 }* nonnull %main.fr, i16 16, i16* nonnull %3)
  call void @main-writeArray({ i16, [16 x i16], i16 }* nonnull %main.fr, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @strtmp.4, i64 0, i64 0), i16 16, i16* nonnull %3)
  ret void

do:                                               ; preds = %cond
  %multmp = mul i16 %loadtmp, 137
  %addtmp = add i16 %multmp, 220
  %addtmp2 = add i16 %addtmp, %loadtmp1
  %modtmp = srem i16 %addtmp2, 101
  store i16 %modtmp, i16* %0, align 8
  %4 = sext i16 %loadtmp1 to i64
  %5 = getelementptr inbounds { i16, [16 x i16], i16 }, { i16, [16 x i16], i16 }* %main.fr, i64 0, i32 1, i64 %4
  store i16 %modtmp, i16* %5, align 2
  %loadtmp5 = load i16, i16* %2, align 2
  %addtmp6 = add i16 %loadtmp5, 1
  store i16 %addtmp6, i16* %2, align 2
  br label %cond
}

define void @main-qsort({ i16, [16 x i16], i16 }* %fr_ptr, i16 %n, i16* %a) {
entry:
  %main-qsort.fr = alloca { { i16, [16 x i16], i16 }*, i16, i16* }, align 8
  %0 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i16, i16* }, { { i16, [16 x i16], i16 }*, i16, i16* }* %main-qsort.fr, i64 0, i32 0
  store { i16, [16 x i16], i16 }* %fr_ptr, { i16, [16 x i16], i16 }** %0, align 8
  %1 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i16, i16* }, { { i16, [16 x i16], i16 }*, i16, i16* }* %main-qsort.fr, i64 0, i32 1
  store i16 %n, i16* %1, align 8
  %2 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i16, i16* }, { { i16, [16 x i16], i16 }*, i16, i16* }* %main-qsort.fr, i64 0, i32 2
  store i16* %a, i16** %2, align 8
  %subtmp = add i16 %n, -1
  call void @main-qsort-qsort_auxil({ { i16, [16 x i16], i16 }*, i16, i16* }* nonnull %main-qsort.fr, i16 0, i16 %subtmp)
  ret void
}

define void @main-qsort-qsort_auxil({ { i16, [16 x i16], i16 }*, i16, i16* }* %fr_ptr, i16 %lower, i16 %upper) {
entry:
  %main-qsort-qsort_auxil.fr = alloca { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, align 8
  %0 = getelementptr inbounds { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %main-qsort-qsort_auxil.fr, i64 0, i32 0
  store { { i16, [16 x i16], i16 }*, i16, i16* }* %fr_ptr, { { i16, [16 x i16], i16 }*, i16, i16* }** %0, align 8
  %1 = getelementptr inbounds { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %main-qsort-qsort_auxil.fr, i64 0, i32 1
  store i16 %lower, i16* %1, align 8
  %2 = getelementptr inbounds { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %main-qsort-qsort_auxil.fr, i64 0, i32 2
  store i16 %upper, i16* %2, align 2
  %lesstmp40 = icmp slt i16 %lower, %upper
  br i1 %lesstmp40, label %then, label %ifcont37

then:                                             ; preds = %entry
  %3 = getelementptr inbounds { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %main-qsort-qsort_auxil.fr, i64 0, i32 3
  %4 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i16, i16* }, { { i16, [16 x i16], i16 }*, i16, i16* }* %fr_ptr, i64 0, i32 2
  %addtmp = add i16 %upper, %lower
  %divtmp = sdiv i16 %addtmp, 2
  %5 = load i16*, i16** %4, align 8
  %6 = sext i16 %divtmp to i64
  %arrtmp = getelementptr inbounds i16, i16* %5, i64 %6
  %load_arr_elem_tmp = load i16, i16* %arrtmp, align 2
  store i16 %load_arr_elem_tmp, i16* %3, align 4
  %7 = getelementptr inbounds { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %main-qsort-qsort_auxil.fr, i64 0, i32 4
  store i16 %lower, i16* %7, align 2
  %8 = getelementptr inbounds { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %main-qsort-qsort_auxil.fr, i64 0, i32 5
  store i16 %upper, i16* %8, align 8
  br label %cond

cond:                                             ; preds = %then, %ifcont
  %loadtmp34 = phi i16 [ %upper, %then ], [ %loadtmp3144, %ifcont ]
  %loadtmp30 = phi i16 [ %lower, %then ], [ %loadtmp3042, %ifcont ]
  %lessequtmp32 = icmp sgt i16 %loadtmp30, %loadtmp34
  br i1 %lessequtmp32, label %after, label %do

after:                                            ; preds = %cond
  %loadtmp33 = load i16, i16* %1, align 8
  %9 = load { { i16, [16 x i16], i16 }*, i16, i16* }*, { { i16, [16 x i16], i16 }*, i16, i16* }** %0, align 8
  call void @main-qsort-qsort_auxil({ { i16, [16 x i16], i16 }*, i16, i16* }* %9, i16 %loadtmp33, i16 %loadtmp34)
  %loadtmp35 = load i16, i16* %7, align 2
  %loadtmp36 = load i16, i16* %2, align 2
  %10 = load { { i16, [16 x i16], i16 }*, i16, i16* }*, { { i16, [16 x i16], i16 }*, i16, i16* }** %0, align 8
  call void @main-qsort-qsort_auxil({ { i16, [16 x i16], i16 }*, i16, i16* }* %10, i16 %loadtmp35, i16 %loadtmp36)
  br label %ifcont37

do:                                               ; preds = %cond
  %.pre = load { { i16, [16 x i16], i16 }*, i16, i16* }*, { { i16, [16 x i16], i16 }*, i16, i16* }** %0, align 8
  %.phi.trans.insert = getelementptr inbounds { { i16, [16 x i16], i16 }*, i16, i16* }, { { i16, [16 x i16], i16 }*, i16, i16* }* %.pre, i64 0, i32 2
  %.pre46 = load i16*, i16** %.phi.trans.insert, align 8
  %loadtmp12.pre = load i16, i16* %3, align 4
  br label %cond4

cond4:                                            ; preds = %do, %do6
  %loadtmp7 = phi i16 [ %loadtmp30, %do ], [ %addtmp8, %do6 ]
  %11 = sext i16 %loadtmp7 to i64
  %arrtmp10 = getelementptr inbounds i16, i16* %.pre46, i64 %11
  %load_arr_elem_tmp11 = load i16, i16* %arrtmp10, align 2
  %lesstmp = icmp slt i16 %load_arr_elem_tmp11, %loadtmp12.pre
  br i1 %lesstmp, label %do6, label %after5

after5:                                           ; preds = %cond4
  br label %cond13

do6:                                              ; preds = %cond4
  %addtmp8 = add i16 %loadtmp7, 1
  store i16 %addtmp8, i16* %7, align 2
  br label %cond4

cond13:                                           ; preds = %after5, %do15
  %12 = phi i16* [ %.pre46, %after5 ], [ %.pre49, %do15 ]
  %loadtmp16 = phi i16 [ %loadtmp34, %after5 ], [ %subtmp, %do15 ]
  %13 = sext i16 %loadtmp16 to i64
  %arrtmp18 = getelementptr inbounds i16, i16* %12, i64 %13
  %load_arr_elem_tmp19 = load i16, i16* %arrtmp18, align 2
  %moretmp = icmp sgt i16 %load_arr_elem_tmp19, %loadtmp12.pre
  br i1 %moretmp, label %do15, label %after14

after14:                                          ; preds = %cond13
  %lessequtmp = icmp sgt i16 %loadtmp7, %loadtmp16
  br i1 %lessequtmp, label %ifcont, label %then21

do15:                                             ; preds = %cond13
  %subtmp = add i16 %loadtmp16, -1
  store i16 %subtmp, i16* %8, align 8
  %.pre49 = load i16*, i16** %.phi.trans.insert, align 8
  br label %cond13

then21:                                           ; preds = %after14
  %14 = getelementptr inbounds i16, i16* %12, i64 %11
  call void @main-qsort-qsort_auxil-swap({ { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* nonnull %main-qsort-qsort_auxil.fr, i16* %14, i16* %arrtmp18)
  %loadtmp24 = load i16, i16* %7, align 2
  %addtmp25 = add i16 %loadtmp24, 1
  store i16 %addtmp25, i16* %7, align 2
  %loadtmp26 = load i16, i16* %8, align 8
  %subtmp27 = add i16 %loadtmp26, -1
  store i16 %subtmp27, i16* %8, align 8
  br label %ifcont

ifcont:                                           ; preds = %after14, %then21
  %loadtmp3144 = phi i16 [ %loadtmp16, %after14 ], [ %subtmp27, %then21 ]
  %loadtmp3042 = phi i16 [ %loadtmp7, %after14 ], [ %addtmp25, %then21 ]
  br label %cond

ifcont37:                                         ; preds = %entry, %after
  ret void
}

define void @main-qsort-qsort_auxil-swap({ { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %fr_ptr, i16* %a, i16* %b) {
entry:
  %main-qsort-qsort_auxil-swap.fr = alloca { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }, align 8
  %0 = getelementptr inbounds { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }, { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }* %main-qsort-qsort_auxil-swap.fr, i64 0, i32 0
  store { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }* %fr_ptr, { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }** %0, align 8
  %1 = getelementptr inbounds { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }, { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }* %main-qsort-qsort_auxil-swap.fr, i64 0, i32 1
  store i16* %a, i16** %1, align 8
  %2 = getelementptr inbounds { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }, { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }* %main-qsort-qsort_auxil-swap.fr, i64 0, i32 2
  store i16* %b, i16** %2, align 8
  %3 = getelementptr inbounds { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }, { { { { i16, [16 x i16], i16 }*, i16, i16* }*, i16, i16, i16, i16, i16 }*, i16*, i16*, i16 }* %main-qsort-qsort_auxil-swap.fr, i64 0, i32 3
  %loadtmp1 = load i16, i16* %a, align 2
  store i16 %loadtmp1, i16* %3, align 8
  %loadtmp3 = load i16, i16* %b, align 2
  store i16 %loadtmp3, i16* %a, align 2
  store i16 %loadtmp1, i16* %b, align 2
  ret void
}

define void @main-writeArray({ i16, [16 x i16], i16 }* %fr_ptr, i8* %msg, i16 %n, i16* %x) {
entry:
  %main-writeArray.fr = alloca { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }, align 8
  %0 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }, { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }* %main-writeArray.fr, i64 0, i32 0
  store { i16, [16 x i16], i16 }* %fr_ptr, { i16, [16 x i16], i16 }** %0, align 8
  %1 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }, { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }* %main-writeArray.fr, i64 0, i32 1
  store i8* %msg, i8** %1, align 8
  %2 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }, { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }* %main-writeArray.fr, i64 0, i32 2
  store i16 %n, i16* %2, align 8
  %3 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }, { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }* %main-writeArray.fr, i64 0, i32 3
  store i16* %x, i16** %3, align 8
  call void @writeString(i8* %msg)
  %4 = getelementptr inbounds { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }, { { i16, [16 x i16], i16 }*, i8*, i16, i16*, i16 }* %main-writeArray.fr, i64 0, i32 4
  store i16 0, i16* %4, align 8
  br label %cond

cond:                                             ; preds = %entry, %ifcont
  %loadtmp2 = phi i16 [ 0, %entry ], [ %addtmp, %ifcont ]
  %lesstmp = icmp slt i16 %loadtmp2, %n
  br i1 %lesstmp, label %do, label %after

after:                                            ; preds = %cond
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @strtmp.1, i64 0, i64 0))
  ret void

do:                                               ; preds = %cond
  %moretmp = icmp sgt i16 %loadtmp2, 0
  br i1 %moretmp, label %then, label %ifcont

then:                                             ; preds = %do
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @strtmp, i64 0, i64 0))
  br label %ifcont

ifcont:                                           ; preds = %do, %then
  %5 = sext i16 %loadtmp2 to i64
  %arrtmp = getelementptr inbounds i16, i16* %x, i64 %5
  %load_arr_elem_tmp = load i16, i16* %arrtmp, align 2
  call void @writeInteger(i16 %load_arr_elem_tmp)
  %addtmp = add i16 %loadtmp2, 1
  store i16 %addtmp, i16* %4, align 8
  br label %cond
}
